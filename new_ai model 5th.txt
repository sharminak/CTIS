import os
import glob
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import re
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
import pickle

# 1. Base directory
BASE_DIR = r"/home/apcharios/Desktop/CTIS/newtyre_data"
excel_files = glob.glob(os.path.join(BASE_DIR, "**", "*.xlsx"), recursive=True)

# 2. Read and clean each file
def read_and_clean_excel(file_path, operation, target_pressure):
    try:
        df = pd.read_excel(file_path, engine='openpyxl')
        df['Operation'] = operation
        df['Target_Pressure'] = target_pressure
        df = df.dropna(subset=['ST_FR-Tyre', 'ST_FL-Tyre', 'ST_BR-Tyre', 'ST_BL-Tyre'])
        df.fillna(df.median(), inplace=True)
        df.drop_duplicates(inplace=True)
        return df
    except Exception as e:
        print(f"Error reading {file_path}: {e}")
        return None

# 3. Load data from all files
all_dataframes = []
for file_path in excel_files:
    folder_name = os.path.basename(os.path.dirname(file_path)).lower()
    operation = 0 if "inflation" in folder_name else 1 if "deflation" in folder_name else None
    if operation is None:
        print(f"Skipping unknown operation folder: {file_path}")
        continue

    filename = os.path.basename(file_path).lower()
    match = re.search(r'(\d+)[^\d]+(\d+)\s*psi', filename)
    if not match:
        print(f"Skipping file (no target pressure found): {file_path}")
        continue

    target_pressure = float(match.group(2))
    cleaned_df = read_and_clean_excel(file_path, operation, target_pressure)
    if cleaned_df is not None and not cleaned_df.empty:
        all_dataframes.append(cleaned_df)

# 4. Combine and train
combined_data = pd.concat(all_dataframes, axis=0, ignore_index=True)
X = combined_data[['Dy_FR-Tyre', 'Dy_FL-Tyre', 'Dy_BR-Tyre', 'Dy_BL-Tyre', 'Dy_Prsr_m', 'Target_Pressure']]
y = combined_data[['ST_FR-Tyre', 'ST_FL-Tyre', 'ST_BR-Tyre', 'ST_BL-Tyre']]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
y_pred = rf_model.predict(X_test)

mse = mean_squared_error(y_test,y_pred)
r2 = rf_model.score(X_test, y_test)
print(f"Mean Squared Error: {mse}")
print(f"R^2 Score: {r2}")

# 5. Save model
with open('tyre_pressure_model.pkl', 'wb') as f:
    pickle.dump(rf_model, f)
print("Model training complete and saved.")

# 6. Define prediction helpers
def prepare_data_for_prediction(dynamic_pressures):
    return pd.DataFrame([dynamic_pressures], columns=[
        'Dy_FR-Tyre', 'Dy_FL-Tyre', 'Dy_BR-Tyre', 'Dy_BL-Tyre', 'Dy_Prsr_m', 'Target_Pressure'])

def make_prediction(dynamic_pressures):
    new_data = prepare_data_for_prediction(dynamic_pressures)
    with open('tyre_pressure_model.pkl', 'rb') as file:
        model = pickle.load(file)
    pred = model.predict(new_data)
    return {
        'ST_FR-Tyre': pred[0][0],
        'ST_FL-Tyre': pred[0][1],
        'ST_BR-Tyre': pred[0][2],
        'ST_BL-Tyre': pred[0][3]
    }

# 7. Plotting function: Subplots per tyre
def plot_by_combination(tyre_comb):
    tyre_map = {
        "ALL": ['FR', 'FL', 'BR', 'BL'],
        "FP":  ['FR', 'FL'],
        "BP":  ['BR', 'BL']
    }
    tyres = tyre_map.get(tyre_comb.upper(), [])
    if not tyres:
        print("Invalid tyre_comb value.")
        return

    if tyre_comb.upper() == "ALL":
        fig, axs = plt.subplots(2, 2, figsize=(14, 8))
        axs = axs.flatten()
    else:
        fig, axs = plt.subplots(1, 2, figsize=(12, 5))
        axs = axs.flatten()

    colors = ['tab:blue', 'tab:green', 'tab:orange', 'tab:red']

    for i, tyre in enumerate(tyres):
        x_vals = X_test[f'Dy_{tyre}-Tyre'].values
        y_vals = y_pred[:, ['FR', 'FL', 'BR', 'BL'].index(tyre)]
        sorted_idx = np.argsort(x_vals)
        x_sorted = x_vals[sorted_idx]
        y_sorted = y_vals[sorted_idx]

        axs[i].plot(x_sorted, y_sorted, color=colors[i], linewidth=2, label=f'{tyre} Predicted')
        axs[i].set_title(f'Predicted Static Pressure vs Dynamic Pressure({tyre})')
        axs[i].set_xlabel('Dynamic Pressure (PSI)')
        axs[i].set_ylabel('Predicted Static Pressure (PSI)')
        axs[i].grid(True)
        axs[i].legend()

    fig.suptitle(f'Predicted Static Pressure vs Dynamic Pressure - {tyre_comb.upper()}', fontsize=16)
    plt.tight_layout(rect=[0, 0, 1, 0.95])
    plt.savefig(f'graph_{tyre_comb.lower()}_subplots.png')
    plt.show()

# 8. Generate graphs
plot_by_combination("ALL")
plot_by_combination("FP")
plot_by_combination("BP")

# 9. Example prediction
dynamic_pressures_example = {
    'Dy_FR-Tyre': 30,
    'Dy_FL-Tyre': 30,
    'Dy_BR-Tyre': 30,
    'Dy_BL-Tyre': 30,
    'Dy_Prsr_m': 30,
    'Target_Pressure': 32
}
print("Example Prediction:", make_prediction(dynamic_pressures_example))

